<?xml version="1.0" encoding="UTF-8"?>

<project name="{{ projectName }}" default="build">
    <target name="get-pre-commit-changeset" depends="get-pre-commit-changeset-js,echo-js-changeset,get-pre-commit-changeset-php,echo-php-changeset"/>

    <target name="get-pre-commit-changeset-php" unless="${git.changeset.php.executed}">
        <property name="git.changeset.php.executed" value="true" />
        <exec executable="${basedir}/{{ composerBinDir }}/qa-tools" outputProperty="git.pre-commit.changeset.php.spacesep">
            <arg line="changeset:pre-commit --filter-path={{ phpSrcPath }} --filter-ext=php --separator=' '"/>
        </exec>
        <property name="git.changeset.php.spacesep" value="${git.pre-commit.changeset.php.spacesep}" />
        <condition property="git.changeset.php.notempty">
            <not>
                <equals arg1="${git.changeset.php.spacesep}" arg2="" trim="true" />
            </not>
        </condition>

        <exec executable="${basedir}/{{ composerBinDir }}/qa-tools" outputProperty="git.pre-commit.changeset.php.commasep">
            <arg line="changeset:pre-commit --filter-path={{ phpSrcPath }} --filter-ext=php --separator=','"/>
        </exec>
        <property name="git.changeset.php.commasep" value="${git.pre-commit.changeset.php.commasep}" />
    </target>

    <target name="echo-php-changeset" if="${git.changeset.php.notempty}">
        <echo message="PHP Changeset: ${git.changeset.php.spacesep}"/>
    </target>

    <target name="get-pre-commit-changeset-js" unless="${git.changeset.js.executed}">
        <property name="git.changeset.js.executed" value="true" />
        <exec executable="${basedir}/{{ composerBinDir }}/qa-tools" outputProperty="git.pre-commit.changeset.js">
            <arg line="changeset:pre-commit --filter-path={{ javaScriptSrcPath }} --filter-ext=js --separator=' '"/>
        </exec>
        <property name="git.changeset.js" value="${git.pre-commit.changeset.js}" />
        <condition property="git.changeset.js.notempty">
            <not>
                <equals arg1="${git.changeset.js}" arg2="" trim="true" />
            </not>
        </condition>
    </target>

    <target name="echo-js-changeset" if="${git.changeset.js.notempty}">
        <echo message="js Changeset: ${git.changeset.js}"/>
    </target>

    <target name="dev" depends="pre-commit"/>

    <target name="pre-commit" description="The dev tools to run before commit"
            depends="prepare-dev,get-pre-commit-changeset{% if enablePhpLint %},php-lint{% endif %}{% if enableJsHint %},jshint{% endif %}{% if enablePhpMessDetector %},phpmd{% endif %}{% if enablePhpCodeSniffer %},phpcs{% endif %}{% if enablePhpUnit %},phpunit{% endif %}"/>

    <!--<target name="pre-push" description="The dev tools to run before push"-->
    <!--depends="prepare-dev,composer-run-install{% if enablePhpLint %},php-lint{% endif %}{% if enableJsHint %},jshint{% endif %},dev-tools-parallel{% if enablePhpUnit %},phpunit{% endif %}"/>-->

    <target name="build"
            depends="prepare,composer-run-install{% if enablePhpLint %},php-lint-ci{% endif %}{% if enableJsHint %},jshint-ci{% endif %}{% if enablePhpMessDetector %},phpmd-ci{% endif %}{% if enablePhpCodeSniffer %},phpcs-ci{% endif %}{% if enablePhpCopyPasteDetection %},phpcpd-ci{% endif %}{% if enablePhpSecurityChecker %},php-security-checker{% endif %}{% if enablePhpUnit %},phpunit-ci{% endif %}"/>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="{{ buildArtifactsPath }}/coverage"/>
        <delete dir="{{ buildArtifactsPath }}/logs"/>
    </target>

    <target name="prepare-dev" description="Prepare for dev build">
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="{{ buildArtifactsPath }}/coverage"/>
        <mkdir dir="{{ buildArtifactsPath }}/logs"/>
    </target>

    <target name="check-composer">
        <available file="composer.phar" property="composer.installed"/>
    </target>

    <target name="composer-install" depends="check-composer" unless="composer.installed">
        <get src="http://getcomposer.org/composer.phar" dest="composer.phar"/>
    </target>

    <target name="composer-run-install" depends="composer-install">
        <exec executable="php" failonerror="true">
            <arg line="composer.phar install --dev"/>
        </exec>
    </target>

    {% if enablePhpLint %}<target name="php-lint" description="Perform syntax check of sourcecode files">
    <exec executable="sh" failonerror="true">
        <arg value="-c" />
        <arg value="${basedir}/{{ composerBinDir }}/qa-tools changeset:pre-commit --filter-path={{ phpSrcPath }} --filter-ext=php | xargs -n1 -P8 php -l 1>/dev/null" />
    </exec>
</target>

    <target name="php-lint-ci" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>
            <fileset dir="{{ phpSrcPath }}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>
    {% endif %}

    {% if enableJsHint %}<target name="jshint" depends="get-pre-commit-changeset-js" if="${git.changeset.js.notempty}">
    <exec executable="node" failonerror="true">
        <arg value="{{ composerBinDir }}/jshint"/>
        <arg value="--config=.jshintrc"/>
        <arg line="${git.changeset.js}"/>
    </exec>
</target>

    <target name="jshint-ci">
        <exec executable="node" failonerror="true" output="{{ buildArtifactsPath }}/logs/checkstyle-jshint.xml">
            <arg value="{{ composerBinDir }}/jshint"/>
            <arg value="--config=.jshintrc"/>
            <arg value="--reporter=checkstyle"/>
            <arg value="{{ javaScriptSrcPath }}"/>
        </exec>
    </target>
    {% endif %}

    {% if enablePhpSecurityChecker %}<target name="php-security-checker" description="Check your composer dependencies for insecure components">
    <exec executable="{{ composerBinDir }}/security-checker" failonerror="true">
        <arg value="security:check"/>
        <arg value="--verbose"/>
        <arg value="composer.lock"/>
    </exec>
</target>
    {% endif %}

    {% if enablePhpMessDetector %}<target name="phpmd" depends="get-pre-commit-changeset-php" if="${git.changeset.php.notempty}"
                                          description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="{{ composerBinDir }}/phpmd" failonerror="true">
        <arg value="${git.changeset.php.commasep}"/>
        <arg value="text"/>
        <arg value="phpmd.xml"/>
    </exec>
</target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="{{ composerBinDir }}/phpmd" failonerror="true">
            <arg path="{{ phpSrcPath }}"/>
            <arg value="xml"/>
            <arg value="phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="{{ buildArtifactsPath }}/logs/pmd.xml"/>
        </exec>
    </target>
    {% endif %}

    {% if enablePhpCodeSniffer %}<target name="phpcs" depends="get-pre-commit-changeset-php" if="${git.changeset.php.notempty}"
                                         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="{{ composerBinDir }}/phpcs" failonerror="true">
        <arg value="--standard=phpcs.xml"/>
        <arg value="--warning-severity=0"/> <!-- Don't show warnings-->
        <arg value="--extensions=php"/>
        <arg value="--report=full"/>
        <arg line="${git.changeset.php.spacesep}"/>
    </exec>
</target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="{{ composerBinDir }}/phpcs" output="/dev/null" failonerror="true">
            <arg value="--report-checkstyle={{ buildArtifactsPath }}/logs/checkstyle-php.xml"/>
            <arg value="--standard=phpcs.xml"/>
            <arg value="--extensions=php"/>
            <arg path="{{ phpSrcPath }}"/>
        </exec>
    </target>
    {% endif %}

    {% if enablePhpCopyPasteDetection %}<target name="phpcpd-ci" description="Find duplicate code using PHPCPD">
    <exec executable="{{ composerBinDir }}/phpcpd" failonerror="true">
        <arg value="--log-pmd"/>
        <arg value="{{ buildArtifactsPath }}/logs/pmd-cpd.xml"/>
        <arg path="{{ phpSrcPath }}"/>
    </exec>
</target>
    {% endif %}

    {% if enablePhpUnit %}<target name="phpunit" description="Run unit tests with PHPUnit">
    <exec executable="{{ composerBinDir }}/phpunit" failonerror="true">
        <arg line="--configuration={{ phpUnitConfigPath }}"/>
    </exec>
</target>

    <target name="phpunit-ci" description="Run unit tests with PHPUnit">
        <exec executable="{{ composerBinDir }}/phpunit" failonerror="true">
            <arg line="--configuration={{ phpUnitConfigPath }}"/>
            <arg line="--coverage-html={{ buildArtifactsPath }}/coverage"/>
            <arg line="--log-junit={{ buildArtifactsPath }}/logs/junit.xml"/>
            <arg line="--coverage-clover={{ buildArtifactsPath }}/logs/clover.xml"/>
        </exec>
    </target>
    {% endif %}

</project>
