<?xml version="1.0" encoding="UTF-8"?>

<project name="{{ projectName }}-pre-commit" default="build">

    <target name="build"
            depends="prepare-environment{% if enablePhpLint %},php-lint{% endif %}{% if enableJsHint %},jshint{% endif %}{% if enablePhpMessDetector %},phpmd{% endif %}{% if enablePhpCodeSniffer %},phpcs{% endif %}{% if enablePhpUnit %},phpunit{% endif %}"/>

    <target name="prepare-environment"
            depends="set-test-tree-location,get-changeset,composer-run-install">
        <echo message="OK"/>
    </target>

    <target name="get-changeset"
            depends="{% if enableJsTools %}get-changeset.js,{% endif %}get-changeset.php,get-changeset.php-spacesep,get-changeset.php-commasep"/>

    <target name="get-changeset.php" depends="set-test-tree-location" unless="changeset.php.executed">
        <property name="changeset.php.executed" value="true"/>

        <!-- Get changeset separated by newline -->
        <exec executable="${basedir}/{{ composerBinDir }}/qa-tools" outputProperty="changeset.php.newlinesep">
            <arg line="changeset:pre-commit --filter-path=src --filter-ext=php"/>
        </exec>

        <!-- Assign changeset relative filenames to property -->
        <property name="changeset.php.relative.newlinesep" value="${changeset.php.newlinesep}"/>

        <!-- Check if changeset contains values -->
        <condition property="changeset.php.notempty">
            <not>
                <equals arg1="${changeset.php.newlinesep}" arg2="" trim="true"/>
            </not>
        </condition>
    </target>

    <!-- Assign changeset absolute filenames to property -->
    <target name="get-changeset.php-absolute.newlinesep" depends="get-changeset.php"
            if="changeset.php.notempty">
        <loadresource property="changeset.php.absolute.newlinesep">
            <propertyresource name="changeset.php.newlinesep"/>
            <filterchain>
                <tokenfilter>
                    <linetokenizer/>
                    <replaceregex pattern="^" replace="${test-tree-location}/"/>
                </tokenfilter>
            </filterchain>
        </loadresource>
    </target>

    <!-- Convert newline separated to space separated -->
    <target name="get-changeset.php-spacesep" depends="get-changeset.php-absolute.newlinesep"
            if="changeset.php.notempty">
        <loadresource property="changeset.php.relative.spacesep">
            <propertyresource name="changeset.php.relative.newlinesep"/>
            <filterchain>
                <tokenfilter delimoutput=" "/>
            </filterchain>
        </loadresource>
        <loadresource property="changeset.php.absolute.spacesep">
            <propertyresource name="changeset.php.absolute.newlinesep"/>
            <filterchain>
                <tokenfilter delimoutput=" "/>
            </filterchain>
        </loadresource>
    </target>

    <!-- Convert newline separated to comma separated -->
    <target name="get-changeset.php-commasep" depends="get-changeset.php-absolute.newlinesep"
            if="changeset.php.notempty">
        <loadresource property="changeset.php.relative.commasep">
            <propertyresource name="changeset.php.relative.newlinesep"/>
            <filterchain>
                <tokenfilter delimoutput=","/>
            </filterchain>
        </loadresource>
        <loadresource property="changeset.php.absolute.commasep">
            <propertyresource name="changeset.php.absolute.newlinesep"/>
            <filterchain>
                <tokenfilter delimoutput=","/>
            </filterchain>
        </loadresource>
    </target>

    {% if enableJsTools %}<target name="get-changeset.js"
            unless="changeset.js.executed">
        <property name="changeset.js.executed" value="true"/>
        <exec executable="${basedir}/{{ composerBinDir }}/qa-tools" outputProperty="changeset.js">
            <arg line="changeset:pre-commit --filter-path={{ javaScriptSrcPath }} --filter-ext=js --separator=' '"/>
        </exec>
        <property name="changeset.js" value="${changeset.js}"/>
        <condition property="changeset.js.notempty">
            <not>
                <equals arg1="${changeset.js}" arg2="" trim="true"/>
            </not>
        </condition>
    </target>
{% endif %}

    <target name="set-test-tree-location">
        <condition value="${tmp_dir}" else="${basedir}" property="test-tree-location">
            <isset property="tmp_dir"/>
        </condition>
    </target>

    <target name="check-composer">
        <available file="${test-tree-location}/composer.phar" property="composer.installed"/>
    </target>

    <target name="composer-download"
            depends="check-composer"
            unless="composer.installed">
        <get src="http://getcomposer.org/composer.phar" dest="${test-tree-location}/composer.phar"/>
    </target>

    <target name="composer-run-install"
            depends="composer-download">
        <exec executable="php" failonerror="true">
            <arg line="${test-tree-location}/composer.phar install --prefer-dist --quiet --no-interaction --working-dir ${test-tree-location}"/>
        </exec>
    </target>

    {% if enablePhpLint%}{# Since Ant cannot loop over csv values as a workaround, pass the changeset as includes so phplint will only be applied to changed files
    #}<target name="php-lint"
            depends="get-changeset.php-commasep"
            if="changeset.php.notempty">
        <apply executable="php" output="/dev/null" logError="true" failonerror="true">
            <arg value="-l"/>
            <fileset dir="${test-tree-location}" includes="${changeset.php.relative.commasep}"/>
        </apply>
        <echo message="OK"/>
    </target>
{% endif %}

    {% if enableJsHint %}<target name="jshint"
            depends="set-test-tree-location,get-changeset.js"
            if="changeset.js.notempty">
        <exec executable="node" failonerror="true">
            <arg value="${test-tree-location}/{{ composerBinDir }}/jshint"/>
            <arg value="--config=${test-tree-location}/.jshintrc"/>
            <arg line="${changeset.js}"/>
        </exec>
        <echo message="OK"/>
    </target>
{% endif %}

    {% if enablePhpMessDetector %}<target name="phpmd"
            depends="get-changeset.php-commasep"
            if="changeset.php.notempty">
        <exec executable="${test-tree-location}/{{ composerBinDir }}/phpmd" failonerror="true">
            <arg value="${changeset.php.absolute.commasep}"/>
            <arg value="text"/>
            <arg value="${test-tree-location}/phpmd.xml"/>
        </exec>
        <echo message="OK"/>
    </target>
{% endif %}

    {% if enablePhpCodeSniffer %}<target name="phpcs"
            depends="get-changeset.php-spacesep"
            if="changeset.php.notempty">
        <exec executable="${test-tree-location}/{{ composerBinDir }}/phpcs" failonerror="true">
            <arg value="--standard=${test-tree-location}/phpcs.xml"/>
            <!-- Don't show warnings-->
            <arg value="--warning-severity=0"/>
            <arg value="--extensions=php"/>
            <arg value="--report=full"/>
            <arg line="${changeset.php.absolute.spacesep}"/>
        </exec>
        <echo message="OK"/>
    </target>
{% endif %}

    {% if enablePhpUnit %}<!--
        PHPUnit always runs, regardless of there being changes in PHP src.
        This is because other changes, e.g. config, can also break tests
    -->
    <target name="phpunit">
        <exec outputproperty="phpunit-output-raw" resultproperty="phpunit-exitcode"
              executable="${test-tree-location}/{{ composerBinDir }}/phpunit" failonerror="false">
            <arg line="--configuration=${test-tree-location}{{ phpUnitConfigPath }} --stop-on-failure"/>
        </exec>
        <condition property="phpunit-output" value="${phpunit-output-raw}" else="OK">
            <isfailure code="${phpunit-exitcode}"/>
        </condition>
        <echo message="${phpunit-output}"/>
        <fail message="PHPUnit failed">
            <condition>
                <isfailure code="${phpunit-exitcode}"/>
            </condition>
        </fail>
    </target>
{% endif %}

    {% if enableBehat %}<target name="behat">
        <exec executable="php" failonerror="true">
            <arg line="${test-tree-location}/{{ composerBinDir }}/behat --config ./behat.yml --ansi --profile dev ${test-tree-location}/features --tags=~skip"/>
        </exec>
    </target>
{% endif %}

</project>
